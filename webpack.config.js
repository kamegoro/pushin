/* eslint-disable @typescript-eslint/no-var-requires */
const path = require('path');
const webpack = require('webpack');
// single pug-plugin replaces functionality of mini-css-extract-plugin and html-webpack-plugin
const PugPlugin = require('pug-plugin');
const TerserPlugin = require('terser-webpack-plugin');

const banner = require('./build/banner');

module.exports = (env, { mode }) => {
  const isProduction = mode === 'production';

  const config = {
    mode,
    target: 'browserslist',
    devServer: {
      open: '/pushin/',
      static: {
        directory: path.join(__dirname, 'docs'),
        publicPath: '/pushin/',
      },
      // hot reload: watch changes in all Pug dependencies
      watchFiles: {
        paths: ['docs/**/*.*'],
        options: {
          usePolling: true,
        },
      },
      port: 8080,
    },
    entry: {
      // Note by using pug-plugin:
      // - the Entrypoint is the Pug file, not a JS file.
      // - styles must be loaded in Pug, e.g.:  `link(href=require("./path/to/main.scss") rel="stylesheet")`
      // - scripts must be loaded in Pug, e.g.: `script(src=require("./path/to/main.ts"))`

      index: './docs/home.pug',
      installation: {
        import: './docs/installation.pug',
        filename: 'installation/index.html',
      },
      composition: {
        import: './docs/composition.pug',
        filename: 'composition/index.html',
      },
      target: {
        import: './docs/target.pug',
        filename: 'target/index.html',
      },
      api: {
        import: './docs/api.pug',
        filename: 'api/index.html',
      },
      'examples/simple': {
        import: './docs/simple.pug',
        filename: 'examples/simple/index.html',
      },
      'examples/responsive': {
        import: './docs/responsive.pug',
        filename: 'examples/responsive/index.html',
      },
      'examples/cat': {
        import: './docs/cat.pug',
        filename: 'examples/cat/index.html',
      },
    },
    output: {
      path: path.resolve(__dirname, 'docs'),
      publicPath: '/pushin/',
      filename: 'pushin.min.js',
      //filename: 'assets/js/[name].[contenthash:8].js', // use dynamic name when in Pug is required more than 1 script file
    },
    resolve: {
      extensions: ['.ts', '.js'],
      alias: {
        pushin: path.resolve('./src'),
      },
    },
    plugins: [
      new webpack.BannerPlugin({
        banner,
        exclude: /\.html$/, // disable banner in HTML, because BannerPlugin incorrectly inserts banner into HTML generated by pug-plugin
      }),
      // enable processing of Pug files from entry
      new PugPlugin({
        verbose: !isProduction, // output processing info
        pretty: !isProduction, // output formatted HTML
        modules: [
          // module extracts CSS from style source files required in Pug, using of `mini-css-extract-plugin` is not needed
          PugPlugin.extractCss({
            // output filename of styles
            filename: 'pushin.min.css',
            //filename: 'assets/css/[name].[contenthash:8].css', // use dynamic name when in Pug is required more than 1 style file
          }),
        ],
      }),
    ],
    module: {
      rules: [
        {
          test: /\.pug$/,
          loader: PugPlugin.loader, // PugPlugin already contains the `@webdiscus/pug-loader`
          options: {
            verbose: !isProduction, // output processing info
            method: 'render', // fast method to compile in static HTML
            // enable embeded pug-loader filters
            embedFilters: {
              // :highlight - use server-side highlighting at compilation of Pug tempaltes
              highlight: {
                verbose: !isProduction, // output processing info, e.g. auto loaded languages
                use: 'prismjs', // name of a highlighting npm package, must be extra installed
              },
            },
          },
        },
        {
          test: /\.css$/i,
          // Using the PugPlugin.extractCss the the mini-css-extract-plugin is not needed.
          // Different beetween PugPlugin.extractCss and mini-css-extract-plugin:
          // - mini-css-extract-plugin extracts CSS from imported styles in JS (bad practice) and from webpack entry
          // - PugPlugin.extractCss extracts CSS from source files used in Pug (correct way) and from webpack entry
          use: ['css-loader'],
        },
        {
          test: /.ts$/,
          exclude: /node_modules/,
          loader: 'ts-loader',
        },
      ],
    },
  };

  // in production mode the JS and CSS are already optimized and minimized,
  // therefore following config has't an effect and can be omitted:
  if (isProduction) {
    config.optimization = {
      minimize: true,
      minimizer: [new TerserPlugin({ extractComments: false })],
    };
  }

  return config;
};
